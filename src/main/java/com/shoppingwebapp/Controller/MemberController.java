package com.shoppingwebapp.Controller;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.Blob;
import java.util.Base64;
import java.util.Optional;

import com.shoppingwebapp.Utils.Base64Utils;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import com.shoppingwebapp.Dao.MemberRepository;
import com.shoppingwebapp.Model.Member;
import org.springframework.web.multipart.MultipartFile;

@CrossOrigin(allowCredentials = "true", origins = "http://localhost:5173", allowedHeaders = "http://localhost:5173") // set
                                                                                                                     // CORS
@Controller // This means that this class is a Controller
@RequestMapping(path = "/member") // This means URL's start with /demo (after Application path)
public class MemberController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MemberRepository memberRepository;

    @PostMapping(path = "/register") // Create member
    @ResponseBody
    public String createNewUser(@RequestParam String username, @RequestParam String email,
                                @RequestParam String password, @RequestParam String phone) {
        //檢查名字是否被註冊過了

        //check username repeat
        Iterable<Member> iterable = memberRepository.findByUsername(username);
        for (Member member : iterable) {
            if (member.getUsername().equals(username)) {
                return "Fail! Username has been registered";
            }
        }

        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        // hash
        String encryptedPassword = passwordEncoder.encode(password);

        Member member = new Member();
        member.setUsername(username);
        member.setEmail(email);
        member.setPassword(encryptedPassword);
        member.setPhone(phone);
        member.setAdmin(false);
        memberRepository.save(member);
        return "Success!";
    }

    @PostMapping(path = "/updateMemberInfo") // return member info
    @ResponseBody
    public String updateMemberInfo(@RequestParam String newUsername, @RequestParam String newEmail,
                                   @RequestParam String password, @RequestParam String newPassword, HttpSession session) {
        Object memberID = session.getAttribute("userId");
        if (memberID != null) {
            Optional<Member> Optional = memberRepository.findById(Integer.parseInt(memberID.toString()));
            Member member = Optional.get();
            BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
            if (passwordEncoder.matches(password, member.getPassword())) {
                // hash
                String encryptedPassword = passwordEncoder.encode(newPassword);
                //set
                member.setUsername(newUsername);
                member.setEmail(newEmail);
                member.setPassword(encryptedPassword);
                memberRepository.save(member);
                return "Success!";
            } else
                return "Fail! Incorrect Password";
        }
        return "Fail!";
    }

    @PostMapping(path = "/requestMemberInfo") // update member info
    @ResponseBody
    public Member requestMemberInfo(HttpSession session) {
        Object memberID = session.getAttribute("userId");
        if (memberID != null) {
            Optional<Member> Optional = memberRepository.findById(Integer.parseInt(memberID.toString()));
            return Optional.get();
        }
        return null;
    }

    @PostMapping("/uploadImage")
    public ResponseEntity<String> uploadImage(@RequestParam MultipartFile file, @RequestParam Integer memberID) throws IOException {
        if (memberID != null) {
            String base64Img = Base64Utils.converToBase64(file);
            byte[] imgBytes = Base64.getDecoder().decode(base64Img);
            int updateCount = memberRepository.updateImgById(memberID, imgBytes);
            if (updateCount > 0) {
                return ResponseEntity.ok("Image uploaded successfully for member with ID " + memberID);
            } else {
                return ResponseEntity.ok("Failed to upload image for member with ID " + memberID);
            }
        } else {
             return ResponseEntity.ok("Member ID is null");
        }
    }
    @GetMapping("/loadImage/{memberID}")
    public ResponseEntity<InputStreamResource> getMemberPhoto(@PathVariable Integer memberID) {

        Member member = memberRepository.findMemberById(memberID);
        if (member == null || member.getImg() == null) {
            return ResponseEntity.notFound().build();
        }


        ByteArrayInputStream inputStream = new ByteArrayInputStream(member.getImg());

        // Set content type and header
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.IMAGE_JPEG);
        headers.setContentLength(member.getImg().length);
        headers.set("Content-Disposition", "inline; filename=member_photo.jpg");

        return new ResponseEntity<>(new InputStreamResource(inputStream), headers, HttpStatus.OK);
    }



}
